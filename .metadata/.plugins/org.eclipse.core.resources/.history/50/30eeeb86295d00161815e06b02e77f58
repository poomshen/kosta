//사용
//awt, swing, android 사용
//android 사용 > 이벤트 제어

//클래스 안에 클래스가 들어가는 형태
//Inner class, Outer class
/*
class OuterClass{
   class InnerClass
   
}
*/

class OuterClass{
   public int pdate = 100;
   private int data = 30;
   
   //장점 : outclass 자원을 사용할 수 있다.
   class Innerclass{
      void msg(){
         System.out.println("outer data : " + data);
      }
   }
}

abstract class Person2{
   void eat(){
   }
}

class Man extends Person2{
   @Override
   void eat() { 
      System.out.println("Person2 의 eat 함수 재정의");
   }
}
//////////////////////////////////////////////////////////////
interface Eatable{
   void eat();
}


public class E14_nnerClass {
   public static void main(String[] args) {
      OuterClass outobj = new OuterClass();
      System.out.println("public 자원 : " + outobj.pdate);
      OuterClass.Innerclass innerobj = outobj.new Innerclass();
      innerobj.msg();
      
      /*
      Man m = new Man();
      Person2 p2 = m;
      p2.eat();
      */
      /*
      Person2 p2 = new Man();
      p2.eat();
      */
      
      //JAVA
      //Person2를 삭송하는 Man 없이도 객체를 만들어서 사용가능
      //익명타입
      Person2 p3 = new Person2(){
         @Override
         void eat() {
            System.out.println("구현코드");
         }
      };
      p3.eat();
      
      ///////////////////////////////////////////////////
      
   }

}